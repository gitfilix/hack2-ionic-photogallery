{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Storage } from '@capacitor/storage';\nimport { Capacitor } from '@capacitor/core';\nimport { Geolocation } from '@capacitor/geolocation';\nconst PHOTO_STORAGE = \"photos\";\nexport function useGeoLocation() {\n  _s();\n\n  // useSteate \n  const [photos, setPhotos] = useState([]);\n  useEffect(() => {\n    // async call Storage.get all photos\n    printCurrentPosition();\n\n    const loadSaved = async () => {\n      const {\n        value\n      } = await Storage.get({\n        key: PHOTO_STORAGE\n      }); // parse if there are pictures or return empty array\n\n      const photosInStorage = value ? JSON.parse(value) : []; // If running on the web...\n\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await Filesystem.readFile({\n            path: photo.filepath,\n            directory: Directory.Data\n          }); // Web platform only: Load the photo as base64 data\n\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setPhotos(photosInStorage);\n    };\n\n    loadSaved();\n  }, []);\n\n  const printCurrentPosition = async () => {\n    const coordinates = await Geolocation.getCurrentPosition();\n    console.log('Current position:', coordinates);\n  };\n\n  const takePhoto = async () => {\n    // take a new photo: generic Camera.getPhoto from Capacitor method\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 95\n    }); // unique file names \n\n    const fileName = new Date().getTime() + '.jpeg'; // Array with stored images \n\n    const savedFileImage = await savePicture(cameraPhoto, fileName); // newly taken Photos should be updated and stored \n\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    });\n  };\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // platform hybrid will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await Filesystem.readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to 'HTTP'\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      // Capacitonr convertFile convert file URIs\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  }; // photo taken by the user should not be stored 'use case: ugly'\n\n\n  const deletePhoto = async photo => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath); // Update photos array cache by overwriting the existing photo array\n\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    }); // delete photo file from filesystem\n\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await Filesystem.deleteFile({\n      path: filename,\n      directory: Directory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}\n\n_s(useGeoLocation, \"rNJeiEBnoDDbCNHI2MVPxiP450E=\");\n\nexport async function base64FromPath(path) {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string');\n      }\n    };\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["/Users/rubendiaz/projects/hackaton/hack2-ionic-photogallery/src/hooks/useGeoLocation.ts"],"names":["useState","useEffect","isPlatform","Filesystem","Directory","Camera","CameraResultType","CameraSource","Storage","Capacitor","Geolocation","PHOTO_STORAGE","useGeoLocation","photos","setPhotos","printCurrentPosition","loadSaved","value","get","key","photosInStorage","JSON","parse","photo","file","readFile","path","filepath","directory","Data","webviewPath","data","coordinates","getCurrentPosition","console","log","takePhoto","cameraPhoto","getPhoto","resultType","Uri","source","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","set","stringify","base64Data","base64FromPath","webPath","savedFile","writeFile","uri","convertFileSrc","deletePhoto","filter","p","filename","substr","lastIndexOf","deleteFile","response","fetch","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\"\nimport { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\nimport { Storage } from '@capacitor/storage'\nimport { Capacitor } from '@capacitor/core';\nimport { Geolocation } from '@capacitor/geolocation';\n\nconst PHOTO_STORAGE = \"photos\";\n\nexport interface UserPhoto {\n  filepath: string;\n  webviewPath?: string;\n}\n\n\n\nexport function useGeoLocation() {\n  // useSteate \n  const [photos, setPhotos] = useState<UserPhoto[]>([]);\n\n  useEffect(() => {\n    // async call Storage.get all photos\n    printCurrentPosition()\n    const loadSaved = async () => {\n      const { value } = await Storage.get({ key: PHOTO_STORAGE });\n      // parse if there are pictures or return empty array\n      const photosInStorage = (value ? JSON.parse(value) : []) as UserPhoto[];\n      // If running on the web...\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await Filesystem.readFile({\n            path: photo.filepath,\n            directory: Directory.Data\n          });\n          // Web platform only: Load the photo as base64 data\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n      setPhotos(photosInStorage);\n    };\n    loadSaved();\n  }, []);\n\n  const printCurrentPosition = async () => {\n    const coordinates = await Geolocation.getCurrentPosition();\n  \n    console.log('Current position:', coordinates);\n  };\n\n  const takePhoto = async () => {\n    // take a new photo: generic Camera.getPhoto from Capacitor method\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 95\n    });\n    // unique file names \n    const fileName = new Date().getTime() + '.jpeg';\n    // Array with stored images \n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    // newly taken Photos should be updated and stored \n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    Storage.set({ key: PHOTO_STORAGE, value: JSON.stringify(newPhotos) });\n  };\n\n  const savePicture = async (photo: Photo, fileName: string): Promise<UserPhoto> => {\n    let base64Data: string;\n    // platform hybrid will detect Cordova or Capacitor;\n    if (isPlatform('hybrid')) {\n      const file = await Filesystem.readFile({\n        path: photo.path!\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath!);\n    }\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to 'HTTP'\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      // Capacitonr convertFile convert file URIs\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  // photo taken by the user should not be stored 'use case: ugly'\n  const deletePhoto = async (photo: UserPhoto) => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\n\n    // Update photos array cache by overwriting the existing photo array\n    Storage.set({ key: PHOTO_STORAGE, value: JSON.stringify(newPhotos) });\n\n    // delete photo file from filesystem\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await Filesystem.deleteFile({\n      path: filename,\n      directory: Directory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    photos,\n    takePhoto\n  };\n}\n\nexport async function base64FromPath(path: string): Promise<string> {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string')\n      }\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}