{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\";\nimport { Camera, CameraResultType, CameraSource } from '@capacitor/camera';\nimport { Storage } from '@capacitor/storage';\nimport { Capacitor } from '@capacitor/core';\nimport { Geolocation } from '@capacitor/geolocation';\nconst PHOTO_STORAGE = \"photos\";\nexport function useGeoLocation() {\n  _s();\n\n  // useSteate \n  const [photos, setPhotos] = useState([]);\n  const [position, setPosition] = useState([]);\n  useEffect(() => {\n    const position = getCurrentPosition();\n    setPosition(position);\n  }, []);\n\n  const getCurrentPosition = async () => {\n    const position = await Geolocation.getCurrentPosition();\n    console.log('Current position:', position);\n    return position;\n  };\n\n  const takePhoto = async () => {\n    // take a new photo: generic Camera.getPhoto from Capacitor method\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 95\n    }); // unique file names \n\n    const fileName = new Date().getTime() + '.jpeg'; // Array with stored images \n\n    const savedFileImage = await savePicture(cameraPhoto, fileName); // newly taken Photos should be updated and stored \n\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    });\n  };\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // platform hybrid will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await Filesystem.readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to 'HTTP'\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      // Capacitonr convertFile convert file URIs\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  }; // photo taken by the user should not be stored 'use case: ugly'\n\n\n  const deletePhoto = async photo => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath); // Update photos array cache by overwriting the existing photo array\n\n    Storage.set({\n      key: PHOTO_STORAGE,\n      value: JSON.stringify(newPhotos)\n    }); // delete photo file from filesystem\n\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await Filesystem.deleteFile({\n      path: filename,\n      directory: Directory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    position,\n    photos,\n    takePhoto\n  };\n}\n\n_s(useGeoLocation, \"yTbr9CQhRtVPqtunJ0n8j+ojBRw=\");\n\nexport async function base64FromPath(path) {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string');\n      }\n    };\n\n    reader.readAsDataURL(blob);\n  });\n}","map":{"version":3,"sources":["/Users/rubendiaz/projects/hackaton/hack2-ionic-photogallery/src/hooks/useGeoLocation.ts"],"names":["useState","useEffect","isPlatform","Filesystem","Directory","Camera","CameraResultType","CameraSource","Storage","Capacitor","Geolocation","PHOTO_STORAGE","useGeoLocation","photos","setPhotos","position","setPosition","getCurrentPosition","console","log","takePhoto","cameraPhoto","getPhoto","resultType","Uri","source","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","set","key","value","JSON","stringify","photo","base64Data","file","readFile","path","data","base64FromPath","webPath","savedFile","writeFile","directory","Data","filepath","uri","webviewPath","convertFileSrc","deletePhoto","filter","p","filename","substr","lastIndexOf","deleteFile","response","fetch","blob","Promise","resolve","reject","reader","FileReader","onerror","onload","result","readAsDataURL"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { isPlatform } from \"@ionic/react\";\nimport { Filesystem, Directory } from \"@capacitor/filesystem\"\nimport { Camera, CameraResultType, CameraSource, Photo } from '@capacitor/camera';\nimport { Storage } from '@capacitor/storage'\nimport { Capacitor } from '@capacitor/core';\nimport { Geolocation } from '@capacitor/geolocation';\nimport { get } from \"https\";\n\nconst PHOTO_STORAGE = \"photos\";\n\nexport interface UserPhoto {\n  filepath: string;\n  webviewPath?: string;\n}\n\nexport function useGeoLocation() {\n  // useSteate \n  const [photos, setPhotos] = useState<UserPhoto[]>([]);\n  const [position, setPosition] = useState<any>([]);\n\n  useEffect(() => {\n    const position = getCurrentPosition()\n    setPosition(position)\n  }, []);\n\n  const getCurrentPosition = async () => {\n    const position = await Geolocation.getCurrentPosition();\n    console.log('Current position:', position);\n    return position\n  };\n\n  const takePhoto = async () => {\n    // take a new photo: generic Camera.getPhoto from Capacitor method\n    const cameraPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 95\n    });\n    // unique file names \n    const fileName = new Date().getTime() + '.jpeg';\n    // Array with stored images \n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    // newly taken Photos should be updated and stored \n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    Storage.set({ key: PHOTO_STORAGE, value: JSON.stringify(newPhotos) });\n  };\n\n  const savePicture = async (photo: Photo, fileName: string): Promise<UserPhoto> => {\n    let base64Data: string;\n    // platform hybrid will detect Cordova or Capacitor;\n    if (isPlatform('hybrid')) {\n      const file = await Filesystem.readFile({\n        path: photo.path!\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath!);\n    }\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to 'HTTP'\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      // Capacitonr convertFile convert file URIs\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  // photo taken by the user should not be stored 'use case: ugly'\n  const deletePhoto = async (photo: UserPhoto) => {\n    // Remove this photo from the Photos reference data array\n    const newPhotos = photos.filter(p => p.filepath !== photo.filepath);\n\n    // Update photos array cache by overwriting the existing photo array\n    Storage.set({ key: PHOTO_STORAGE, value: JSON.stringify(newPhotos) });\n\n    // delete photo file from filesystem\n    const filename = photo.filepath.substr(photo.filepath.lastIndexOf('/') + 1);\n    await Filesystem.deleteFile({\n      path: filename,\n      directory: Directory.Data\n    });\n    setPhotos(newPhotos);\n  };\n\n  return {\n    deletePhoto,\n    position,\n    photos,\n    takePhoto\n  };\n}\n\nexport async function base64FromPath(path: string): Promise<string> {\n  const response = await fetch(path);\n  const blob = await response.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onload = () => {\n      if (typeof reader.result === 'string') {\n        resolve(reader.result);\n      } else {\n        reject('method did not return a string')\n      }\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}